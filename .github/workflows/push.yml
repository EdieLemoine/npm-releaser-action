name: 'Push to main âœ¨'

on:
  push:
    branches:
      - main
      - alpha
      - beta

  workflow_dispatch:

jobs:
  run:
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      #language=bash
      - run: |
          jq --version

      - id: run
        #language=bash
        run: |
          versions=$(curl -s https://api.wordpress.org/core/version-check/1.7/ | jq -c '[.offers[].version]')

          echo "versions=$versions" >> $GITHUB_OUTPUT

      - id: matrix
        #language=bash
        run: |
          echo ${{ fromJson(steps.run.outputs.versions) }}

          versions=${{ steps.run.outputs.versions }}

          echo 'versions'
          echo $versions
          
          MIN_VERSION="0"
          MAX_VERSION="infinite"

          # if string starts with [, treat as json, if not, treat as multiline string
          if [[ $versions == \[* ]]; then
            LIST=${{ fromJson(steps.run.outputs.versions) }}
          else
            LIST=$(echo "$versions" | jq -Rsc 'split("\n")')
          fi
          
          echo 'LIST'
          echo $LIST
          
          JSON=$(echo "$LIST" | jq -Rsc --arg min "$MIN_VERSION" --arg max "$MAX_VERSION" 'sort | reverse | map(select(. >= $min and . <= $max))')
          
          echo 'JSON'
          echo $JSON
          
          LATEST=$(echo "$JSON" | jq -r '.[0]')
          
          echo 'LATEST'
          echo $LATEST
          
          MATRIX=$(echo "$JSON" | jq -r --arg latest "$LATEST" 'map({version: ., minor: (split(".") | .[0:2] | join(".")), major: (split(".") | .[0]), latest: (. == $latest)})')
          
          echo 'MATRIX'
          echo $MATRIX

          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  test:
    needs: run
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        test: ${{ fromJson(needs.run.outputs.matrix) }}

    steps:
      - run: |
          echo ${{ toJson(matrix) }}
          echo ${{ toJson(matrix.test) }}
          
          echo ${{ matrix }}
          echo ${{ matrix.test }}
          
          echo ${{ matrix.test.version }}

  #  test-yarn:
  #    name: 'Run yarn tests ðŸ§ª'
  #    uses: ./.github/workflows/--run-tests-yarn.yml
  #    secrets: inherit

  #  release:
  #    name: 'Release new version ðŸš€'
  #    uses: myparcelnl/actions/.github/workflows/--semantic-release.yml@v3
  #    secrets: inherit
  #    needs: test-yarn

  #  tag:
  #    name: 'Update tags'
  #    needs: release
  #    runs-on: ubuntu-22.04
  #    steps:
  #      - uses: myparcelnl/actions/update-tags@v3

  #  rebase:
  #    name: 'Rebase develop onto main ðŸ”€'
  #    runs-on: ubuntu-22.04
  #    if: ${{ always() }}
  #    needs: [ test-yarn, release ]
  #    steps:
  #      - uses: ./rebase
  #        with:
  #          token: ${{ secrets.GH_REPO_TOKEN }}

  #  deploy:
  #    name: 'Deploy'
  #    needs: release
  #    runs-on: ubuntu-22.04
  #    steps:
  #      - uses: actions/checkout@v3
  #
  #      - name: 'Build'
  #        run: yarn build
  #
  #      - name: Deploy to GitHub Pages
  #        uses: JamesIves/github-pages-deploy-action@4.1.5
  #        with:
  #          branch: gh-pages
  #          folder: dist
  #          token: ${{ secrets.GH_REPO_TOKEN }}
  #
  #      - name: 'Summary'
  #        run: |
  #          echo "## Deploy summary" >> $GITHUB_STEP_SUMMARY
  #          echo "" >> $GITHUB_STEP_SUMMARY
  #          echo "- ðŸŸ¢ Site uploaded to GitHub Pages" >> $GITHUB_STEP_SUMMARY

#  rebase-prs:
#    if: always()
#    runs-on: ubuntu-22.04
#    steps:
#      - uses: myparcelnl/actions/setup-git-credentials@v3
#        id: credentials
#        with:
#          app-id: ${{ secrets.BOOPS_BOOPS_APP_ID }}
#          private-key: ${{ secrets.BOOPS_BOOPS_PRIVATE_KEY }}
#
#      - uses: peter-evans/rebase@v2
#        with:
#          token: ${{ steps.credentials.outputs.token }}
#          base: ${{ github.ref_name }}
#          exclude-drafts: true
