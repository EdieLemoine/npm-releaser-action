name: 'Push to main âœ¨'

on:
  workflow_dispatch:

jobs:
  run:
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      #language=bash
      - run: |
          jq --version

      - id: run
        #language=bash
        run: |
          # create multiline string with visible line separators
          versions=$(curl -s https://api.wordpress.org/core/version-check/1.7/ | jq -c '[.offers[].version] | unique | .[]' | jq -sc 'join("\n")')

          echo "versions=$versions" >> $GITHUB_OUTPUT

      - id: matrix
        #language=bash
        run: |
          versions=${{ steps.run.outputs.versions }}
          # replace line separators with actual newlines
          string=$(echo "$versions" | jq -Rsc 'gsub("\n"; "\u0000")')

          echo 'versions'
          echo $versions

          MIN_VERSION="0"
          MAX_VERSION="infinite"

          LINES=$((echo "$versions" | wc -l) || true)
          echo 'LINES'
          echo $LINES

          LINES2=$((echo "$versions" | jq -r 'split("\n")') || true)
          echo 'LINES2'
          echo $LINES2

          LINES3=$((echo "$versions" | jq -Rsc 'split("\n")') || true)
          echo 'LINES3'
          echo $LINES3

          LINES4=$((echo "$versions" | jq -sc 'split("\n")') || true)
          echo 'LINES4'
          echo $LINES4

          LINES5=$((echo "$versions" | jq -Rc 'split("\n")') || true)
          echo 'LINES5'
          echo $LINES5

          JSON=$(echo "$versions" | jq -Rsc --arg min "$MIN_VERSION" --arg max "$MAX_VERSION" 'split("\n") | sort | reverse | map(select(. >= $min and . <= $max))')

          echo 'JSON'
          echo $JSON

          LATEST=$(echo "$JSON" | jq -r '.[0]')

          echo 'LATEST'
          echo $LATEST

          MATRIX=$(echo "$JSON" | jq -r --arg latest "$LATEST" 'map({version: ., minor: (split(".") | .[0:2] | join(".")), major: (split(".") | .[0]), latest: (. == $latest)})')

          echo 'MATRIX'
          echo $MATRIX

          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  test:
    needs: run
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        test: ${{ fromJson(needs.run.outputs.matrix) }}

    steps:
      - run: |
          echo ${{ toJson(matrix) }}
          echo ${{ toJson(matrix.test) }}

          echo ${{ matrix }}
          echo ${{ matrix.test }}

          echo ${{ matrix.test.version }}

  #    test-yarn:
  #      name: 'Run yarn tests ðŸ§ª'
  #      uses: ./.github/workflows/--run-tests-yarn.yml
  #      secrets: inherit

  release:
    runs-on: ubuntu-22.04
    steps:
      - uses: myparcelnl/actions/setup-git-credentials@v4
        id: credentials
        with:
          app-id: ${{ secrets.BOOPS_BOOPS_APP_ID }}
          private-key: ${{ secrets.BOOPS_BOOPS_PRIVATE_KEY }}

      - uses: actions/checkout@v4
        with:
          token: ${{ steps.credentials.outputs.token }}
          fetch-depth: 0

      - uses: myparcelnl/actions/yarn-install@v4
        with:
          node-version: ${{ vars.NODE_VERSION }}

      - uses: myparcelnl/actions/semantic-release@v4
        id: pre-release
        with:
          semantic-release-args: --dry-run
          token: ${{ steps.credentials.outputs.token }}

      - name: 'Output after pre-release'
        env:
          PREVIOUS_VERSION: ${{ steps.pre-release.outputs.previous-version }}
          PREVIOUS_VERSION_NUMBER: ${{ steps.pre-release.outputs.previous-version-number }}
          RELEASED: ${{ steps.pre-release.outputs.released }}
          RELEASE_TYPE: ${{ steps.pre-release.outputs.release-type }}
          VERSION: ${{ steps.pre-release.outputs.version }}
          VERSION_NUMBER: ${{ steps.pre-release.outputs.version-number }}
        shell: bash
        #language=bash
        run: |
          echo "## Pre-release outputs"                              >> $GITHUB_STEP_SUMMARY
          echo ""                                                    >> $GITHUB_STEP_SUMMARY
          echo "- Previous version number: $PREVIOUS_VERSION_NUMBER" >> $GITHUB_STEP_SUMMARY
          echo "- Previous version: $PREVIOUS_VERSION"               >> $GITHUB_STEP_SUMMARY
          echo "- Release type: $RELEASE_TYPE"                       >> $GITHUB_STEP_SUMMARY
          echo "- Released: $RELEASED"                               >> $GITHUB_STEP_SUMMARY
          echo "- Version number: $VERSION_NUMBER"                   >> $GITHUB_STEP_SUMMARY
          echo "- Version: $VERSION"                                 >> $GITHUB_STEP_SUMMARY

      - uses: myparcelnl/actions/semantic-release@v4
        id: release
        if: steps.pre-release.outputs.released == 'true'
        with:
          token: ${{ steps.credentials.outputs.token }}
          write-summary: true

      - name: 'Output after release'
        if: steps.pre-release.outputs.released == 'true'
        env:
          PREVIOUS_VERSION: ${{ steps.release.outputs.previous-version }}
          PREVIOUS_VERSION_NUMBER: ${{ steps.release.outputs.previous-version-number }}
          RELEASED: ${{ steps.release.outputs.released }}
          RELEASE_TYPE: ${{ steps.release.outputs.release-type }}
          VERSION: ${{ steps.release.outputs.version }}
          VERSION_NUMBER: ${{ steps.release.outputs.version-number }}
        shell: bash
        #language=bash
        run: |
          echo "## Pre-release outputs"                              >> $GITHUB_STEP_SUMMARY
          echo ""                                                    >> $GITHUB_STEP_SUMMARY
          echo "- Previous version number: $PREVIOUS_VERSION_NUMBER" >> $GITHUB_STEP_SUMMARY
          echo "- Previous version: $PREVIOUS_VERSION"               >> $GITHUB_STEP_SUMMARY
          echo "- Release type: $RELEASE_TYPE"                       >> $GITHUB_STEP_SUMMARY
          echo "- Released: $RELEASED"                               >> $GITHUB_STEP_SUMMARY
          echo "- Version number: $VERSION_NUMBER"                   >> $GITHUB_STEP_SUMMARY
          echo "- Version: $VERSION"                                 >> $GITHUB_STEP_SUMMARY

#  tag:
#    name: 'Update tags'
#    needs: release
#    runs-on: ubuntu-22.04
#    steps:
#      - uses: myparcelnl/actions/update-tags@v3

#  rebase:
#    name: 'Rebase develop onto main ðŸ”€'
#    runs-on: ubuntu-22.04
#    if: ${{ always() }}
#    needs: [ test-yarn, release ]
#    steps:
#      - uses: ./rebase
#        with:
#          token: ${{ secrets.GH_REPO_TOKEN }}

#  deploy:
#    name: 'Deploy'
#    needs: release
#    runs-on: ubuntu-22.04
#    steps:
#      - uses: actions/checkout@v4
#
#      - name: 'Build'
#        run: yarn build
#
#      - name: Deploy to GitHub Pages
#        uses: JamesIves/github-pages-deploy-action@4.1.5
#        with:
#          branch: gh-pages
#          folder: dist
#          token: ${{ secrets.GH_REPO_TOKEN }}
#
#      - name: 'Summary'
#        run: |
#          echo "## Deploy summary" >> $GITHUB_STEP_SUMMARY
#          echo "" >> $GITHUB_STEP_SUMMARY
#          echo "- ðŸŸ¢ Site uploaded to GitHub Pages" >> $GITHUB_STEP_SUMMARY

#  rebase-prs:
#    if: always()
#    runs-on: ubuntu-22.04
#    steps:
#      - uses: myparcelnl/actions/setup-git-credentials@v3
#        id: credentials
#        with:
#          app-id: ${{ secrets.BOOPS_BOOPS_APP_ID }}
#          private-key: ${{ secrets.BOOPS_BOOPS_PRIVATE_KEY }}
#
#      - uses: peter-evans/rebase@v2
#        with:
#          token: ${{ steps.credentials.outputs.token }}
#          base: ${{ github.ref_name }}
#          exclude-drafts: true
